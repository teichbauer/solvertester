0.4.20-20200508
- port p3sat3 see its gitlog.txt
0.4.19-20200507
- trials with cfg6-13.json
0.4.18-20200507
- analyzing the possibitilty to divide
0.4.17-20200505
- fix
0.4.16-20200505
- bitdic.subset now can cut 7-4, 3-0 bit from config1.json
- visualizer can print out better formatted cut json files
0.4.15-20200504
- re-structured files
- gen_config.py now take:
    python gen_config.py <nov> <nok> <cnf-file-name>
- solver0 now can accept more nov, also with klause of size < 3
  true also for output.
0.4.14-20200504
- ported solver4.py, visualizer.py, bitdic.py, basics.py, vklause from p3sat3
0.4.13-20200430
- issue-1:
  cnf2config.py generated config file name, loses the original uf100-430-01
  information.
- issue-2:
  solver4 against config250_1065.json ran for > 2 hours and still not done.
  Is it improvable?
  I noticed the sat values are huge: 100 variables will be a value with 100 bits
  transfers for such numbers with the Tx in BitDic is very costly.
  -- I will verify this with uuf* (unsattable)
  -- since solution is defined as finding one sat-value. I will reduce the sats
     array to be of size 1 - imagine if I have 1024 numbers, going thru the 
     100K Txs ...
- solver4.py against config100_430.json:
  PS D:\lab\solvertester> python .\cnf2config.py uf100-430-01.cnf
  ./configs/config100_430.json  has been generated.
  PS D:\lab\solvertester> python .\solver4.py config100_430.json
  128 SATs found
  perf-count:
  {   'BitDic-init': 79396,
      'SATS': [ 
                772567477510603447532936275928,
                772567477510603446433424648152,
                772567477510603447535083759576,
                772567477510603446435572131800,
                772567477584390423827774482392,
                772567477584390422728262854616,
                772567477584390423829921966040,
                772567477584390422730410338264,
                772586820323717281599731574744,
                772586820323717280500219946968,
                772586820323717281601879058392,
                772586820323717280502367430616,
                772586820397504257894569781208,
                772586820397504256795058153432,
                772586820397504257896717264856,
                772586820397504256797205637080,
                772567477510621461931445757912,
                772567477510621460831934130136,
                772567477510621461933593241560,
                772567477510621460834081613784,
                772567477584408438226283964376,
                772567477584408437126772336600,
                772567477584408438228431448024,
                772567477584408437128919820248,
                772586820323735295998241056728,
                772586820323735294898729428952,
                772586820323735296000388540376,
                772586820323735294900876912600,
                772586820397522272293079263192,
                772586820397522271193567635416,
                772586820397522272295226746840,
                772586820397522271195715119064,
                777519237667744968632532772824,
                777519237667744967533021145048,
                777519237667744968634680256472,
                777519237667744967535168628696,
                777519237741531944927370979288,
                777519237741531943827859351512,
                777519237741531944929518462936,
                777519237741531943830006835160,
                777538580480858802699328071640,
                777538580480858801599816443864,
                777538580480858802701475555288,
                777538580480858801601963927512,
                777538580554645778994166278104,
                777538580554645777894654650328,
                777538580554645778996313761752,
                777538580554645777896802133976,
                777519237667762983031042254808,
                777519237667762981931530627032,
                777519237667762983033189738456,
                777519237667762981933678110680,
                777519237741549959325880461272,
                777519237741549958226368833496,
                777519237741549959328027944920,
                777519237741549958228516317144,
                777538580480876817097837553624,
                777538580480876815998325925848,
                777538580480876817099985037272,
                777538580480876816000473409496,
                777538580554663793392675760088,
                777538580554663792293164132312,
                777538580554663793394823243736,
                777538580554663792295311615960,
                772557806104046530499538626520,
                772557806104046529400026998744,
                772557806104046530501686110168,
                772557806104046529402174482392,
                772557806177833506794376832984,
                772557806177833505694865205208,
                772557806177833506796524316632,
                772557806177833505697012688856,
                772577148917160364566333925336,
                772577148917160363466822297560,
                772577148917160364568481408984,
                772577148917160363468969781208,
                772577148990947340861172131800,
                772577148990947339761660504024,
                772577148990947340863319615448,
                772577148990947339763807987672,
                772557806104064544898048108504,
                772557806104064543798536480728,
                772557806104064544900195592152,
                772557806104064543800683964376,
                772557806177851521192886314968,
                772557806177851520093374687192,
                772557806177851521195033798616,
                772557806177851520095522170840,
                772577148917178378964843407320,
                772577148917178377865331779544,
                772577148917178378966990890968,
                772577148917178377867479263192,
                772577148990965355259681613784,
                772577148990965354160169986008,
                772577148990965355261829097432,
                772577148990965354162317469656,
                777509566261188051599135123416,
                777509566261188050499623495640,
                777509566261188051601282607064,
                777509566261188050501770979288,
                777509566334975027893973329880,
                777509566334975026794461702104,
                777509566334975027896120813528,
                777509566334975026796609185752,
                777528909074301885665930422232,
                777528909074301884566418794456,
                777528909074301885668077905880,
                777528909074301884568566278104,
                777528909148088861960768628696,
                777528909148088860861257000920,
                777528909148088861962916112344,
                777528909148088860863404484568,
                777509566261206065997644605400,
                777509566261206064898132977624,
                777509566261206065999792089048,
                777509566261206064900280461272,
                777509566334993042292482811864,
                777509566334993041192971184088,
                777509566334993042294630295512,
                777509566334993041195118667736,
                777528909074319900064439904216,
                777528909074319898964928276440,
                777528909074319900066587387864,
                777528909074319898967075760088,
                777528909148106876359278110680,
                777528909148106875259766482904,
                777528909148106876361425594328,
                777528909148106875261913966552],
    'TxTopKn': 25525,
    'add_clause': 79396,
    'set_txseed': 26936,
    'split_topbit': 26936,
    'test4_finish': 53870,
    'time-used': 331.3506295681}
  331.35 sec = 5.52 minutes
0.4.12-20200430
- restructured files and some fixes
      python gen_config.py <nov> <nok>
  will generate data/cnf<nov>-<nok>.cnf file, and also generate
  configs/config<nov>_<nok>.json and have it verified. Say, by running
      python gen_config.py 22 91
  I have ./data/cnf22-91.cnf, and./configs/config22_91.json, now by running
      python solver0.py config22_91.json
  I then got output:
    4 sats found: [3872333, 3905101, 4134477, 4167245]
    time used: 20.752955436706543
0.4.11-20200428
  PS D:\lab\solvertester> python .\cnfgenerator.py 12 60
  PS D:\lab\solvertester> python .\cnf2config.py cnf12-60.cnf
  PS D:\lab\solvertester> python .\verifyconfig.py config12_60.json
  config12_60.json is ok
  PS D:\lab\solvertester> python .\verifyconfig.py config20_80.json
  config20_80.json is ok
  PS D:\lab\solvertester> .\solver0.py config12_60.json
  sat founr: {3335: 'SAT'}
  time used: 0.17184162139892578
  PS D:\lab\solvertester> .\solver0.py config20_80.json
  sat founr: {55191: 'SAT'}
  time used: 3.547246217727661
0.4.10-20200425
- verifyconfig will verify a config file
- verifysatvalue will verify a sat value is satisfying a config file.
- when doing solver0, 
  choose output will output a file under verify/*
    python solver0.py <config-file> output
  choose not output
    python solver0.py <config-file>
  will cmd-printout first sat value, and time used
0.4.9-20200423
- add verifyconfig.py for verify value for its sat-result.
0.4.8-20200422
- naming: 
    python cnfgenerator.py 8 38 -> data/cnf8-38.cnf -> 8 variable,38 clauses
    python cnf2config.py cnf8-38.cnf -> configs/config8_38.json
    python solver0.py config8_38.json-> verify/config8_38.txt
- solver0.py: also print out sats, on cmd and in file as head-line
0.4.7-20200422
- fix in cnfgenerator/gen_line and gnerate: each klause generated is now
  a set of values, no more list of values. For when testing if a list is in
  the group, it compare to the existing lists, and list comparison can result
  [1,2,3] != [3,2,1], but they should be the same. I could sort before compare,
  but now I use set in stead of list, then
   set([1,2,3]) == set([3,2,1])
  so this way no duplicates has a chance.
0.4.6-20200422
- github: created a new repo named solvertester, and
  on cmd line:
  git remote add origin https://github.com/teichbauer/solvertester.git
0.4.5-20200422
- solver0 for finding sats brutal-force way, and save the result
  as verify/config.txt
0.4.4-20200421
- fixes
0.4.3-20200421
- cnfgenerator.py can generate my own cnf file, that can be
  converted by cnf2config
0.4.2-20200421
- make sdic file from cnf files
0.4.1-20200421
- branch off solvertester for testing solvers, from solver4/0.3.158
0.3.158-20200421
- clean up a bit
- added perf_count for performance analysis, and pretty-print of that.
