0.3.160-20200421
- make sdic file from cnf files
0.3.159-20200421
0.3.159-20200421
- branch off solvertester for testing solvers
0.3.158-20200421
- clean up a bit
- added perf_count for performance analysis, and pretty-print of that.
0.3.157-20200421
- fix a simple bug in bitdic.py:
     v = v + 1 << shift  
  should be 
     v = v + (1 << shift)
- success! got the right sat: 234.
- completed doc/path-of-sat.txt describes the whole process of finding SAT.
0.3.156-20200421
- still not getting the right sat. But did many fixes, and getting near.
0.3.155-20200420
- fixes
0.3.154-20200419
- hit satpoint when C001-7@1t-6@1t-5@0-4@1t-3@1t-2@1t-1@1t.txt
  is split, here vkdic becomes empty
- designing how to handle that. Good!
0.3.153-20200419
- some refactoring in bidtdic and solver4
- start coding recursive tree_loop/sub_tree
0.3.152-20200418
- solver4/test: added splits all the way to 5 bit division
- TBD: read and analize output files under verify
0.3.151-20200418
- refactored visualizer, TransKlauseEngine
- some fixes
0.3.150-20200417
- visualizer now printout bit-position marks
0.3.149-20200417
- separate test to solver4.py
- give BitDic a seed-name
0.3.148-20200417
- fixes
0.3.147-20200417
- bitdic.split_topbit
0.3.146-20200417
- Tx works now.
0.3.145-20200417
- fixes
0.3.144-20200416
- trans-klause-engine: support of transvalue and reverse-klause, reverse-value
0.3.143-20200416
- basic frame works now: bitdic, with vkdic: I can browse verify/Org.txt
0.3.142-20200416
- reorganize files. New classes: Visualizer, VKlause
0.3.141-20200415
- forgot algo-description.txt last checkin.
0.3.140-20200415
- redesign/impl of TransKlauseEngine
- detail algo
0.3.139-20200415
- manual data analysis continues
0.3.138-20200414
- branching off from p3sat to p3sat3.
- new design: split n-th bit, n-1-th,... till
0.3.137-20200413
- conclude the bad news.
- fix get_rel2 to accept Tx=True, so output Tx-ed finder-kname the coverage
0.3.136-20200412
- more cleanup
0.3.135-20200412
- refactored solver2 codes, and start analyzing complexity along the way.
0.3.134-20200410
- block-count way of finding sats started working. But I feel this may be
  O(2**n), or at least, difficult to justify for not.
- I should now first, verify or prove, solver2 is not O(2**n), even thought
  I can not yet get sat-values, just they/it do exist or not.
0.3.133-20200410
- fixed bug in klauseproperty. gone thru without error!
  with all 38 klauses, there is no sat - 49 stops.
0.3.132-20200409
- v= 64 still works!
0.3.131-20200409
- progree: till v=32, was right.
  working on the next: C009/32
0.3.130-20200409
- refactoring BGroup.consume/SuperBGroup.consume, coveragepatter.py and
  blockmanager.py
0.3.129-20200407
- impl of coveragepattern's methods, getting ready for blockmanager to work
  will do that tomorrow.
0.3.128-20200406
- finishing BGroup SuperBGroup, based on klauseproperty class
- coveragepatter is each klause's property. It is the block manager for this
  klause.
0.3.127-20200405
- progree...
0.3.126-20200405
- BGroup and SuperBGroup in block.py
- CoveragePattern will setup BGroup or SuperBGroup for a klause. I will use
  this mechanism for counting down the unsats - TBD
0.3.125-20200403
- start coding block-counting algo for finding sats.
- new class Grop andmay SuperGroup, with consume methods
  this should simplify it? After coding in coveragePattermn directly, I
  saw it was too complex to do, so now I hope with Group class, it will change.
  Do that tomorrow.
0.3.124-20200402
- get rid of blockPattern, now use coveragePattern.
- python blockmananger.pywill print-out C001-props-info.txt, denoting the
  coverage-pattern for all C002..C038
0.3.123-20200402
- solver2 now works without Tx.
- impl. of block-coverage approach
0.3.122-20200401
- new approach for calc sat-values, or even new to calc unsats-count.
  using block-pattern
- new BlockManager class. It now get all bolck-patterns for every klause
  but the finder-klause C001.
0.3.121-20200331
- branched off a new repo named 3sat, and thru that I have some new ideas
  see log.txt.
0.3.120-20200327
- three tasks:
  -- verify it is not O(2**n)
  -- figure out a way to get sats
  -- impl.
0.3.119-202000327
- good news: checked against solver1's results (see log/2020-03-25 data table)
  the single coverage results are the same as solver1's break downs!
0.3.118-20200327
- done with all 38 klauses as singles. No errr!
0.3.117-20200327
- fix refs-count algo. and some other fix. It is working all right for C006.
0.3.116-20200326
- found a bug in PathNode.py/power_exhaust! resolved the issue with 
  finder == C006, master = C011
0.3.115-20200326
- new solver0 for calc (O2ⁿ) for coverage-line generation, used for verify
- use TransKlause for testing C006 transformed way.
- print out bit-maps for C001-C038, sorted, unsorted, C006..C038 sorted/unsorted
  for me to look at and do analysis.
0.3.114-20200325
- bad news. New issue when doing finder: C006, on its 3rd master (C011)..
  detail see in log.txt
0.3.113-20200325
- removed totally the sorting, just used name-sort, and the result is
  the same! Good news for me to try, not to employ TransKlause.
- recorded solver1's block approach, for each alone-cover
  for 1..38, 1..37, 1..36, 1..35 see log.txt
  Will use these data for testing
0.3.112-20200325
- simplifying: deleted not-used files
0.3.111-20200324
- trial upload/commmit to github
0.3.110-20200324
- clone to a different project: lab/np/p3sat taken from py3sat
0.3.109-20200324
- it works! I have the count for finder(C001)'s contribution correct
- some refactoring
0.3.108-20200324
- Success. Cleaned up many recursion calls (see log.txt) - stack becomes safer 
  now, and it still produce right paths for all masters under C001.
0.3.107-20200323
- Success! Now all C001 paths are collected correctly.
0.2.106-20200322
- progress. Wrote auto test against config1-info.txt's first 32 lines, and
  all the way verified, untill last : C003. Need to look into that. But 
  otherwise, greate.
0.2.105-20200321
- C020, C021, C010 C037, C002 all right. But on C009, there should be 4 paths:
  0: [1, 9, 20, 23, 31, 34, 35, 18, 30, 33 3]  v=28
  1: [1, 9, 20, 31, 34, 30]                    v=12
  2: [1, 9, 31, 34, 35, 18, 30, 33 3]          v=29
  3: [1, 9, 30, 31, 34]                        v=13
  But the same issue as I encountered before, the 3: path was again calced the
  same as 2:
  3(2): [1, 9, 31, 34, 35, 18, 30, 33 3]          v=29
  So far what I've found:
  when finishing 2: path, returned next_start: 3 - it should be 9.
  Need to do more analysis on this, tomorrow.
0.2.104-20200321
- implemented Path class where is stores original path-lst(ordered by bitdic)
  and a visual-path-lst for human eyes - sorted by name. And a pathset, for 
  testing for subset(used in PathNode.explore) and dulicated.
  This resolved C020 issued I faced esterday.
0.2.103-20200320
- after some refactoring, I re-run the C020, and encountered an issue, that 
  could have demand for 3- or higher combo (that I dont want to use -> O(2ⁿ))
  So I may see a different alternative (see log.txt/2020-03-20 entry)
  That could be a very good way - this would not be O(2ⁿ) complexity!
  I will try it. Now it is too late - almost end of the 24 hours day.
0.2.102-20200319
- sucess on C020, C021, C010, C037 but on the next: C009, the last path
  of it wrong. Analyzing...
- refactored, split PathNode from findPath.py, and PathFinder.py
- recoded PathNode/explore a bit, fix a potential bug.
0.2.101-20200319
- new approach and some refactorings.
0.2.100-20200318
- in BitDic/sort_clause: not use klause bit-value, but use bit position
  better use reversed order(see log.txt)? Also, dont remove finished masters
  in other master's compatidic, so some coverages are duplicated. But
  these duplications are easy to handle later. I may need to
  code to fit this. Hope these ordering knames can help, so I dont need to
  save all the (1..m) combo.powers, which I am afraid will be expoential.
0.2.99-20200318
- I realize, if I save powers of all 2-combo, 3-combo, 4-combo,.. along the 
  growing path, then it will ends up with 
    2ⁿ = C(n,0) + C(n,1)+C(n,3)+...+C(n,n-1)+C(N,N)
  so many combos. If I save power of all of them I will be doing exponential 
  thing That's frustrating.
  New hope, if I sort the coverage among knames, if that can solve the issue?
  I sort the klauses according to how near it is to C001. If that can help?
0.2.98-20200318
- see new thoughts in log.txt
0.2.97-20200318
- To be complete, here is the comparison in total.
  the missing [C002]s are ok, because after C002 is done,  they are removed
  from C003's choice. Since I work sequencially with sorted knames,
  As can be seen, at C012, I had bug, after that, errors are expected.
  So, I have to reslve the issue with [C001 C003 C012] see "11-17:>"
------------comparisons(>differnt,[missing])----------------
05-16: C001 C003 C007 C012 C019 C033 C035 C037
11-17:>C001 C003 C012[C018]C021[C022]C033 C035
07-18: C001 C003 C007 C014 C019 C032 C037
02-19: C001 C003 C006 C014 C019 C022 C032
13-20:>C001[C002]C003 C017 C019 C020 C030 C031[C033][C035]
14-21:>C001[C002]C003[C017]C019 C022 C030 C031[C033][C035]
15-22:>C001 C003[C017 C019]
03-23: C001 C003 C006 C017 C019 C022
04-24: C001 C003 C007 C012 C018 C023 C033 C034 C035
10-25: C001 C003 C010 C012 C018 C021 C033 C034 C035
06-26: C001 C003 C007 C014 C018 C023 C032
00-27: C001 C003 C006 C010 C014 C018 C032
08-28: C001 C003 C009 C018 C020 C023 C030 C031 C033 C034 C035
09-29: C001 C003 C009 C018 C030 C031 C033 C034 C035
12-30:>C001 C003 C013[C018]C023
01-31: C001 C003 C006 C013 C018
================my output================
00:[C001 C003 C006 C010 C014 C018 C032]
01:[C001 C003 C006 C013 C018]
02:[C001 C003 C006 C014 C019 C022 C032]
03:[C001 C003 C006 C017 C019 C022]
04:[C001 C003 C007 C012 C018 C023 C033 C034 C035]
05:[C001 C003 C007 C012 C019 C033 C035 C037]
06:[C001 C003 C007 C014 C018 C023 C032]
07:[C001 C003 C007 C014 C019 C032 C037]
08:[C001 C003 C009 C018 C020 C023 C030 C031 C033 C034 C035]
09:[C001 C003 C009 C018 C030 C031 C033 C034 C035]
10:[C001 C003 C010 C012 C018 C021 C033 C034 C035]
11:[C001 C003 C012 C018 C021 C033 C035]
12:[C001 C003 C013 C023]
13:[C001 C003 C017 C019 C020 C030 C031]
14:[C001 C003 C019 C022 C030 C031]
15:[C001 C003]
+++++++++++++++ should be output +++++++++++++++++++++++
00016  $ C001 C003 C007 C012 C019 C033 C035 C037
00017  $ C001 C003 C012 C019 C021 C022 C033 C035
00018  $ C001 C003 C007 C014 C019 C032 C037
00019  $ C001 C003 C006 C014 C019 C022 C032
00020  $ C001 C002 C003 C017 C019 C020 C030 C031 C033 C035
00021  $ C001 C002 C003 C017 C019 C022 C030 C031 C033 C035
00022  $ C001 C003 C017 C019
00023  $ C001 C003 C006 C017 C019 C022
00024  $ C001 C003 C007 C012 C018 C023 C033 C034 C035
00025  $ C001 C003 C010 C012 C018 C021 C033 C034 C035
00026  $ C001 C003 C007 C014 C018 C023 C032
00027  $ C001 C003 C006 C010 C014 C018 C032
00028  $ C001 C003 C009 C018 C020 C023 C030 C031 C033 C034 C035
00029  $ C001 C003 C009 C018 C030 C031 C033 C034 C035
00030  $ C001 C003 C013 C018 C023
00031  $ C001 C003 C006 C013 C018

0.2.96-20200317
- in C003, one path wrong:
  [1,3,12,18,21,33,35] should be
  [1,3,12,19,21,33,35]
  This bug caused other wrong paths later:
  [1,3,13,23] should be [1,3,13,18,23]
  and more ...
0.2.96-20200317
- fixed! Now (C003,C006) delivers all 4 correct paths:
  [1,3,6,10,14,18,32]
  [1,3,6,13,18]
  [1,3,6,14,19,22,32]
  [1,3,6,17,19,22]
0.2.95-20200317
- fixes and refactoring. Regression ok. C003 still has the first two
  paths correct: [1 3 6 10 14 18 32], [1 3 6 13 18]
0.2.94-20200316
- start C003 explore.
0.2.93-20200316
- C002 now success: found all 4 paths.
0.2.92-20200316
- C002 now can collect all paths - should be 4. 
  But it wrongly collected more... TBD
0.2.91-20200315
- deeper into it
0.2.90-20200315
- [C001 C002] gets its right 2 paths:
  [2 3 17 19 20 30 31 33 35]
  [2 3 17 19 22 30 31 33 35]
  TBD:
  missing other 2 C002-paths: 
  [2,20,30,31 and [2,30,31]]
  other master-paths are not done right either  
0.2.89-20200315
- progressing on solver2.
0.2.88-20200315
- shovel files and changed the directory structure
0.2.87-20200314
- some progress: I can find two paths under C002
   C001 C002 C003 C017 C019 C020 C030 C031 C033 C035
   C001 C002 C003 C017 C019 C022 C030 C031 C033 C035
  But it kept looping and hang. Will fix tomorrow.
0.2.86-20200313
- moved all py file from py3sat/test/* to  py3sat/*
- progressing on findPath.py
0.2.85-20200312
- start thinking about finding coverage without counting the blocks.
  Wish me luck!
0.2.84-20200312
- success! Now solver1 finds the unsats for 1, 1 2, 1 2 3, ..., 1 2 ...38
  all correct verified by verifySat reading from the config1_result.json
  visually I can see them in config1-info.txt
  Next: If I can show that counting blocks is NOT O(2ⁿ), or I could
  make it to be not O(2ⁿ)!
0.2.83-20200312
- solver1.evaluate works with C001 now.
0.2.82-20200311
- progressing on solver1.
0.2.81-20200311
- make test a python module
- solver1 class - using blockPot approach for 1-st solver (will try path-calc 
  later, which can be solver2)
- change KlauseGroup to be BlockGroup
- delete sortFileName.py
0.2.80-20200310
- more polishing
0.2.79-20200310
- fix. Now tested 1..38 and back-wards.
  Next, to do Tx and then use this counter mechanism to calc unsats
  After that, I will have to look into the counter, if that is O(2ⁿ)
  and if yes, how to do it better!
0.2.78-20200309
- fixes for 7 10 12, 21 32 33, and 2 5
0.2.77-20200308
- all 2-combo coverage are correct. However, found
  7 10 12, 7 10 11 12, 2 5 7 8 9 10 11 12 - these are having
  issues: check against info-12-marks.txt failed. TBD.
0.2.76-20200308
- set up test for melting covers from ulti-knames
0.2.75-20200307
- block-pot's BlockPot/add_seg2base has been tested for C001 against all other
  klauses - single-pair. Now I have to test it for multi-coverage.
  Preparing in blockinfo.py/find_cover, and evaluate - TBD
0.2.74-20200307
- testing BlockPot.add_seg2base (C001 against all other knames)
0.2.73-20200307
- flesh out more for melting block-collections
0.2.72-20200307
- BlockPot replacing analyze.py. Just the stubs for now.
0.2.72-20200307
- clean up the files a bit
0.2.71-20200306
- fix KlauseGroup.py/BlockPattern/get_blocks, tested with C001 - C038 
  against nov=12
0.2.70-20200306
- implementing counting RR-blocks for each klause. Not yet done. Using nov=12
  and my prev C001 - C038 on it, I am pushing forward: tested till C007 that
  still has issue - I will resolve this soon, and will have a working version
  in next days!
0.2.69-20200306
- set up klause-gap analysis: for a klause with bits: (lo,mi,hi)
      dic = {'g0': (None, lo), 'g1': None, 'g2': None, 'g3': None}
      left_hi = self.nov - 3 - hi  # most left gap
      mi_lo = mi - lo
      hi_mi = hi - mi

      if mi_lo > 1:     # mi-lo are not connected
          dic['g1'] = (lo + 1, mi_lo - 1)
          if hi_mi > 1:  # hi-mi are not connected
              # for case: no connection btwn lo,mi and hi: g0, g1, g2, g3
              dic['g2'] = (mi + 1, hi_mi - 1)
              dic['g3'] = (hi + 1, left_hi - 1)
          else:  # hi-mi connected
              # for case: mi-lo connected, but hi-mi not connected: g0,g1,g2
              dic['g2'] = (hi + 1, left_hi - 1)
      else:      # mi-lo are connected, g1 is for next left...
          if hi_mi > 1:  # hi-mi are not connected
              # for case: mi-lo connected, hi-mi are not, g0,g1 and g2
              dic['g1'] = (mi + 1, hi_mi - 1)
              dic['g2'] = (hi + 1, left_hi - 1)
          else:  # hi-mi are connected
              # for case that all hi-mi-lo are connected, only g0 g1 exist
              dic['g1'] = (hi + 1, left_hi - 1)
      return dic
    And using these g-dic info, calc:

    'bso': -1,  # block start-v offset, relative to last block's start-v
    'noc': -1,  # number of adjacent coverage per block
    'gso': -1,  # grp start-v offset, relative to last grp's start-v
    'nob': -1,  # number of blocks per group
    'sgso': -1, # sg start-v offset, relativeto last sg's start-v
    'nog': -1,  # number of grps per sg(super-grp)
    'nosg': -1  # number of super-grp
  Verified the algo on nov=12, C001 - C007.
0.2.68-20200305
- evolving the tools
0.2.67-20200305
- tools to refine BlockPattern
0.2.66-20200305
- progress. Each klause has .props: {total:, blength, bdist, start}
  with this, I can: for C001, loop thru all its compatible knames (27 in total),
  see in the 0..31 range, how many values are covered by these knames, and the
  rest will be covered alone by C001.
  The same way, I will calc, after tx for C002, so that C002 will sit on the
  left-most 0 0 0, and then how many values are covered by C002 alone, ...
  all these sum up, will be the total reduction from that N=2**n search room.
  So that I will see: if the total reduction >=N -> these is no SAT, otherwise
  Yes there exist SAT(s)
- the BlockGroup class needs to be still refined. I am doing nov = 12 to 
  finalize it. Using docs/info-12-clean.txt generated by genData.py 
  I am well underways.
- good news is, all these calcs seem to be polynomial!?
0.2.65-20200303
- verified again with a tool: countCoverage running against config1-info.txt
  which test for all 38 klauses, using my approach of tx/count lone-cover,
  and it is positive!
0.2.64-20200303
- generated files from config1 (38 pairs: *.json/*-info.txt)
- mask-value is of no use - take it away from rel2 and CompatibleKGroup
- re-design the way how to calc coverage by the compatible knames for kname.
0.2.63-20200302
- I used flip.py to work on config3.json, which has 12 klauses(C001..C012),
  here in config3, C001 has the good {7:0,6:0,%:0}, transfer by C002, where
  other klauses (C001,C003,C004,..C012), will be transfered, and then by C003,
  and C004, .. C012. These txs result in different set of klauses, saved in:
    config3-C002.json, 
    config3-C003.json, 
    config3-C004.json, 
    config3-C005.json, 
    config3-C006.json, 
    config3-C007.json, 
    config3-C008.json, 
    config3-C009.json, 
    config3-C010.json, 
    config3-C011.json, 
    config3-C012.json
  Using these, I then generate 12 X 
    config3-info.txt
    config3-C002-info.txt
    config3-C003-info.txt
    config3-C004-info.txt
    config3-C005-info.txt
    config3-C006-info.txt
    config3-C007-info.txt
    config3-C008-info.txt
    config3-C009-info.txt
    config3-C010-info.txt
    config3-C011-info.txt
    config3-C012-info.txt
  in each of these *-info.txt, the coverages(block-values/unsat) by 
  C***(tx-base) are the starting 32 lines.
  In config3-info.txt, I count (within the first 32 lines), how many lines are
  covered by only by C001, which is 0;
  In config3-C002-info.txt/[0..31] lines, ignoring C001, I then count the lines
  that are covered only by C002(renamed as CB02): 26
  In config3-C003-info.txt/[0..31] lines, ignoring C001,C002 I then count the 
  lines that are covered only by C003(renamed as CB03): 26. ...
  ...
  In config3-C011-info.txt/[0..31] lines, ignoring C001,C002,..,C010, I then 
  count the lines that are covered only by C011(renamed as CB11): 32.
  In config3-C012-info.txt/[0..31] lines, ignoring C001,C002,..,C011, I then 
  count the lines that are covered only by C012(renamed as CB12): 32.

  Adding up all these alone-coverages: sum = 216
  And, this 216 is the right UNSAT number!
  
0.2.62-20200302
- tooling: trans-klause for any klause: move it to left-most, and
  set it to be {7:0,6:0,5:0}, transfer all other klauses.
0.2.61-20200229
- From C001 (highst 3 bit klause), deciding how many other klauses are over-
  lapped with C001 (as R), and where they are, must be decided by the distri-
  bution pattern:
  {total:, start-value:, block-length, block-leap, block-group-leap:}
  these are necessary because alone with type-RR-number, and combination/L,
  are not enough.
  With these information, I can know how many RR need to be reduced from
  that klause's own space.
  After C001 be processed and kicked out - leaving the info, next (C002)
  will do the same. 
  This iteration will repeat until last klause is done, then I will be able to
  calc the final unsat.
0.2.60-20200229
- today is the leap-day (this is a leap year)
- processConfig now output -info.txt with separated coverage lists for every
  klause, at the end of the value-table. This will help me to test, code
  KlauseGroup/CompatibleKGroup/grow_cover_lst ... 
  I feel if I can get this oded right, I will win.
0.2.59-20200228
- I should have config1-info.txt with marking the blockers ranked by rank-dict.
  With that, I can evaluate my algo more easily.
- moving .grps-dict and rank-dict (grp_keys-dict from KlauseGroup to 
  toolClasses.py/Combo2Relation)
0.2.58-20200227
- add tools/_test_maskvalue, _test_combination for testing both combinations and
  also mask-value.
  I suspect the original C001's group, should be sorted by maks-value - the C001
  having the hist mask-value (since C001 sits on 11100000, and I may need to
  make T₁ = (Tₐ + Tᵦ) so that T₁ always sits there 11100000). I will see next.
0.2.57-20200227
- The approach of depending on sorting order did not work out, at least not
  totally. (C001,C006) did not get the assignment, but (C001,C003) did get 1,
  but (C001, C005) gets 2. I still need to get find out the logic how to
  distribute new assignments.
0.2.56-20200227
- sorting of tuples with the same length, as for now is based on
  tuple's names. But since naming is not reflecting any nature of the 
  matter, I now try to use klauses merged from tupled-names, their value-masks
  to sort the list in reversed value. See if that would solve the issue I was
  facing, in assigning 2 C010s among 3 candidates:
  (C001,C003)+C010, (c001,C005)+C010 and (C001,C006)+C010. Now
    combine(C001,C003) has the mask value 240
    combine(C001,C005) has the mask value 228
    combine(C001,C006) has the mask value 227
  So the order is now
    [(C001,C003),(C001,C005),(C001,C006)]
  no more as before
    [(C001,C006),(C001,C005),(C001,C003)]
  where name C006 is the biggest. And in the real test data, the 2 C010 are
  appended to (C001,C003) and (C001,C005). Not to (C001,C006)
  I Hope this will solve the issue.
0.2.55-20200227
- save help data files under docs
0.2.54-20200227
- I have good prospect that I will crack this 3sat problem, so 0.1 -> 0.2
- coding algo for calc cover-lines.
0.1.53-20200225
- progressing
0.1.52-20200225
- the newly deviced var-name/var-value transformations can T1 have
  K1 from E = K1 AND K2 AND K3 AND ... AND km
  located at the end of 2⁽ⁿ⁻³⁾, note: Calc T1 will be O(m), and
  rel2-type between any Kᵢ and Kⱼ will be the same as Kᵢ' and Kⱼ',
  so that 
  0. pop out K1, so that E' = K2' AND K3' AND .. AND Km'
  1. GRP.R will increase by K1's 2**(n-3)
  2. all other Kx (x :[2..m], calc RR(K1, Kx) -> Dx
     save Ki.RR[1] = Dx
  3. pop out K2 from Ks so now E = K3 AND K4 AND .. AND Km
     GRP.R increase by 2⁽ⁿ⁻³⁾ - K2.RR[1]
  go to 2..3 steps till Km is reached

  This method is still wrong, because: reducing Ki.RR is NOT enough!
  There are multiple coverage(again!)
  Bad news.
- Good thought:
  1. K1's range can only be cobvered by other klauses that doesn't have
     conflict (no p* rel2 between (K1, Kx)), and,
  2. all other coverage of K1's range: how many times a value
     is covered by which klauses, may be calced out by if conflicts, or
     how many conflits exist between other klauses.
     Good NEWS!
- coded in KlauseGroup.py/CompatibleKGroup, for starting this effort.

0.1.51-20200225
- debugged flip.py/TransKlause
0.1.50-20200225
- more refactoring
0.1.49-20200224
- flip.py/TransKlause
0.1.48-20200224
- RR has O(2**n), so any effort looping thru any RR is as bad as exponential.
- new thoughts: E = k1 AND k2 AND k3 AND ... AND km
  transformations for first klause k1: 
  a)let 3 vars sitting left most (xi -> x7, xj -> x6, xk -> x5)
  b)let values be all 1: (x7:1, x6:1, x5:1)
  This will reduce last 2(2**(n-3)|n=8 = 32)
  iterate k1,..k[m-1]
0.1.47-20200222
- going along.
0.1.46-20200221
- positive thoughts added to log.txt (2020-02-21)
0.1.45-20200221
- impl of Klause class, with a new way using bit-filter and bit mask to
  check a value if it is blocked by this klause.
  Next: how to calc ranges of blocked-values, and calc the intersection of 
  2 klause's block-value-ranges. That will be most crutial!
0.1.44-20200220
- fix bug in BitDic/output
0.1.43-20200220
- BitDic now has a method for out putting bit-map into a file, or on screen.
0.1.42-20200219
- trying to figure out a way to calc R from bit-map, in stead of looping thru
  all C(k,2) + C(k,3) + ...
0.1.41-20200218
- using tools.py and verifySat.py on config1.json/config1_result.json
  -- bit-map (manually made) in info.txt
  -- found no-conflict(px) groups. Written in info.txt
0.1.40-20200218
- config1.json with 38 clauses. When all used (or maybe possible some subsets?),
  it becomes USAT. cut off #38, sat-number = 1 more see log.txt
0.1.39-20200218
- fix bugs so that tools can be used to combine klauses, while
  verifySat can be used to calc sats/unsats of the set of klauses.
- Bad news: I now understand (see log.txt), if I additively loop thru all
  klauses, it would be O(2**n)
0.1.38-20200218
- verifySat.py: new manual test sat/unsat count for list of klauses, interactively
  this replaces the many files saved under combinations/2 /3 /4 ...
  using the config_result.json, which has been generated by processConfig.py
0.1.37-20200218
- more refactoring. write bitdic, rel2-dic and vdic all into config_result.json
0.1.36-20200217
- minor chages - sort file name tool.
0.1.35-20200217
- minor chages - sort file name tool.
0.1.34-20200215
- debug some. get_blck_collections still have issue with 4 clauses - TBD
0.1.33-20200215
- calc_R for unioned clauses. till now tested for 3 clauses.
0.1.32-20200215
- impl of find_combinations(lst, m) where lst is the base list of items,
  for m==5, it will return all 5,4,3,2 combos (a list of tuples).
  I will use this to do next steps. Very good.
0.1.31-20200215
- more manual writing down combos, their RRR, RR, R(USAT), SAT. for me
  to figure out the rule-set. Looking very promising.
  Next I will code some tools to generate all (..13-combos) for me to see
  figure out and verify the rules. Exciting!
0.1.30-20200215
- some tooling, and summarizing 2-combo rules, and part of 3-combo rules.
  It looks very promising...
0.1.29-20200214
- refactorings, and saved data file (in json format):
  bitdic, rel2.dic, and vdic under combinations/*
0.1.28-20200213
- recoded tools. This will help analyzing...
0.1.27-20200213
- more refactoring.
0.1.26-20200212
- refactoring
0.1.25-20200212
- refactoringing and thinking about how to not loop thru all sub-clauses, that
  would be O(k!).
0.1.24-20200211
- a step
0.1.23-20200211
- I seem to have figured out rule-set to calc USAT/SAT (till 4-combo). This may
  be good for calc general case of E = C1 AND.. AND Ck, but sing this rule-set,
  I would have to go thru C(k,2)+C(k,3)+...+C(k,k-1) and this will be O(k!)
  k is in range of 4n, so this will still be exponential (O(n!)). That is bad.
- attempting to think of other possible way -> thought2.txt
0.1.22-20200210
- started 5 combos. So far rules are right!
0.1.21-20200210
- rules stetched to 3-clause combo, with or without opposite shared value(s).
  Sofar the rules are consistent - a very encouraging sign!
0.1.20-20200209
- analyzing rules, and wrote summary in log.txt
0.1.19-20200207
- wrote down the analysis about the nature of Ca and Cb. Sofar for 
  No_share, 1-co, 2-co.
0.1.18-20200207
- refactored several files.
0.1.17-20200205 
- get all 3c-combinations under combinations/<n> | n=2..13. the most are (13,6) and (13,7)
  both have 1716 files under them.
0.1.16-20200204
- put data files in for me to look at them anywhere.
0.1.15-20200204
- can now generate all 78 2-combo, 286 3-combo, 715 4-combo. and if I need, higher order
  combos. But I stop here, and take a look into the files.
0.1.14-20200203
- more progress towards generating 3-combo.
0.1.13-20200203
- fix a bug
0.1.12-20200203
- a step further
0.1.11-20200203
- coding file generator, for making SAT/UNSAT cals for 2-combo,3-combo,...k-combo
  not yet finished. Files will be put under combinations/*
0.1.10-20200203
- 1 step further
0.0.9-20200203
- fix a mis-calc. Now output.txt -> analyze.py -> combine2.txt
  has the right data, for me to look at.
0.0.8-20200203
- analyze.py now has a clause2combine to print out all (13, 2) -> 78 2-clause 
  combinations. For me to loop at and figure the rules!
0.0.7-20200203
- impl ana for analyzing output.txt data.
  For finding rules of how to combine clauses.
0.0.6-20200202
- test/clause.py now print out to a file, all info needed
  to do rule analysis
0.0.5-20200201
- test/clause.py can evaluate 2p8.txt! Now I have a working clause-evaluator
  and I can generate the marked-up value-table, for verifying my 
  reduction-count rules!! I am nearing my goal of solving the 3SAT NP problem!
  I feel great.
0.0.4-20200201
- under tmp data files for analysis
0.0.3-20200131
 new insight: in value table after all marks are done, I can visually see
 if SAT or unSAT. Only, I cannot look into value table in real case, for that
 would be 2**N. But this is good for me to verify my algorithm, and it seems to
 me that I am on the right path!
0.0.2-20200130
some new files and so on.
0.0.1-20200127
- initial.
